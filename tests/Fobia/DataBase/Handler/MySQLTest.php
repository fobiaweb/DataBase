<?php

namespace Fobia\DataBase\Handler;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-07-24 at 06:40:13.
 */
class MySQLTest extends \ezcDbTestCase
{

    /**
     * @var \Fobia\DataBase\Handler\MySQL
     */
    protected $db;

    protected function setUp()
    {
        if (!$this->db) {
            $this->db = new \Fobia\DataBase\Handler\MySQL($this->getConnection()->getConnection());
            parent::setUp();
        }
    }

    protected function tearDown()
    {
        $this->db->setLogger(null);
    }

    protected function initializeDbLogget()
    {
        $this->db->setLogger(function($t, $msg, $args) {
            echo "{$t}\n"
                . "QUERY: {$msg}\n";

            if ($args['params']) {
                echo "Params: " . (is_array($args['params']) ? json_encode($args['params']) : $args['params'])
                    . "\n";
            }
            echo "Time: {$args['time']}\n";
            if (isset($args['error'])) {
                list($sql, $code, $msg) =$args['error'];
                echo "Error $code($sql): $msg\n" ;
            } else {
                echo "Rows: {$args['rows']}\n";
            }
        });
    }


    /////////////////////////////////////////////////////////////////////////


    public function testNewDatabase()
    {
        $this->assertInstanceOf("\Fobia\DataBase\Handler\MySQL", $this->db);
    }
    public function testNewDatabaseDebug()
    {
        $dbParams = array(
            'dns' => 'mysql://root@localhost/mysql',
            'params' => array( 'debug' => true )
        );
        $db = \Fobia\DataBase\DbFactory::create($dbParams);
        $this->assertInstanceOf("\Fobia\DataBase\Handler\MySQL", $db);
    }

    public function testNewDatabaseLogger()
    {
        $dbParams = array(
            'dns' => 'mysql://root@localhost/mysql',
            'params' => array(
                'debug' => true ,
                'logger' => new \Psr\Log\NullLogger()
            )
        );
        $db = \Fobia\DataBase\DbFactory::create($dbParams);
        $this->assertInstanceOf("\Fobia\DataBase\Handler\MySQL", $db);
    }


    /**
     * @covers Fobia\DataBase\Handler\MySQL::getProfiles
     * @todo   Implement testGetProfiles().
     */
    public function testGetProfilesCreate()
    {
        $dbParams = array(
            'dns' => 'mysql://root@localhost/mysql',
            'params' => array( )
        );
        $dbParams['params']['debug'] = true;
        $dbParams['params']['log_error'] = false;
        $dbParams['params']['logger'] = new \Psr\Log\NullLogger();
        $db = \Fobia\DataBase\DbFactory::create($dbParams);
        $this->assertInstanceOf("\Fobia\DataBase\Handler\MySQL", $db);
        return $db;
    }

    /**
     * @covers Fobia\DataBase\Handler\MySQL::getProfiles
     * @todo   Implement testGetProfiles().
     * @depends testGetProfilesCreate
     */
    /*
    public function testGetProfiles($db)
    {
        $db->query("SELECT VERSION()");
        $db->query("SELECT VERSION()");

        $arr = $db->getProfiles();
        $this->assertCount(2, $arr);
        $this->assertEquals('SELECT VERSION()', $arr[0]['query']);

        $this->assertCount(0, $this->db->getProfiles());
    }
    */
    /**
     * @covers Fobia\DataBase\Handler\MySQL::query
     * @todo   Implement testQuery().
     */
    public function testQuery()
    {
        $db = $this->db;
        $stmt = $db->query("SELECT VERSION()");
        $this->assertInstanceOf('\Fobia\DataBase\DbStatement', $stmt);

        $row = $stmt->fetch();
        $v = array_shift($row);
        $this->assertRegExp("/^5\..+/", $v);
    }

    /**
     * @covers Fobia\DataBase\Handler\MySQL::createInsertQuery
     * @todo   Implement testCreateInsertQuery().
     */
    public function testCreateInsertQuery()
    {
        $q = $this->db->createInsertQuery();
        $this->assertInstanceOf('\Fobia\DataBase\Query\QueryInsert', $q);
    }

    /**
     * @covers Fobia\DataBase\Handler\MySQL::createReplaceQuery
     * @todo   Implement testCreateReplaceQuery().
     */
    public function testCreateReplaceQuery()
    {
        $q = $this->db->createReplaceQuery();
        $this->assertInstanceOf('\Fobia\DataBase\Query\QueryReplace', $q);
    }

    /**
     * @covers Fobia\DataBase\Handler\MySQL::createSelectQuery
     * @todo   Implement testCreateSelectQuery().
     */
    public function testCreateSelectQuery()
    {
        $q = $this->db->createSelectQuery();
        $this->assertInstanceOf('\Fobia\DataBase\Query\QuerySelect', $q);
    }


    public function testBeginTransaction()
    {
        $this->assertTrue($this->db->beginTransaction());
        return $this->db;
    }

    /**
     * @depends testBeginTransaction
     */
    public function testCommit($db)
    {
        $this->assertTrue($db->commit());
    }

    public function testRollback()
    {
        $this->db->beginTransaction();
        $this->assertTrue($this->db->rollback());

    }

    public function testLog1()
    {
        $this->expectOutputRegex("/Rows: 1/");
        $this->initializeDbLogget();
        $this->db->query("SELECT VERSION()");
    }

    public function testLog2()
    {
        $this->expectOutputRegex("/Rows: 1/");
        $this->initializeDbLogget();

        $q = $this->db->createSelectQuery();
        $q->select('NOW()')->prepare()->execute();
    }

    public function testLog3()
    {
        $this->expectOutputRegex("/Rows: 3/");
        $this->initializeDbLogget();
        $this->getConnection()->createDataSet();

        $this->db->exec("UPDATE authors SET lastname = 'new' WHERE id > 7");
    }

    public function testLog4()
    {
        $this->expectOutputRegex('/Params: {"val":"new_value 2","id":2}/');
        $this->initializeDbLogget();
        $this->getConnection()->createDataSet();
        
        $q = $this->db->createUpdateQuery();
        $stmt = $q->update('authors')
                ->set('lastname', ':val')
                ->where("id = :id")
                ->prepare();

        $stmt->execute(array(
            'val'=>'new_value 1',
            'id' => 1
        ));
        $stmt->execute(array(
            'val'=>'new_value 2',
            'id' => 2
        ));
        $stmt->execute(array(
            'val'=>'new_value 3',
            'id' => 3
        ));

        $r = $this->db->query("SELECT id, lastname FROM authors WHERE id = 3");
        $item = $r->fetch();
        $this->assertSame(array(
            'id' => '3',
            'lastname'=>'new_value 3',
        ), $item);
    }

    public function testLogError()
    {
        $this->expectOutputRegex("/Error 1064/");
        $this->initializeDbLogget();
        $this->db->exec("SELECT ERROR-SHOW-VER()");
    }
}