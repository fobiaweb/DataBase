<?php

namespace Fobia\DataBase\Handler;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-07-24 at 06:40:13.
 */
class MySQLLogTest extends \PHPUnit_Extensions_Database_TestCase
{
    // only instantiate pdo once for test clean-up/fixture load
    static private $pdo = null;

    // only instantiate PHPUnit_Extensions_Database_DB_IDatabaseConnection once per test
    private $conn = null;

    /**
     * @var \Fobia\DataBase\Handler\MySQL
     */
    protected $db;

    /**
     * @return PHPUnit_Extensions_Database_DB_IDatabaseConnection
     */
    final public function getConnection()
    {
        if ($this->conn === null) {
            if (self::$pdo == null) {
                // $pdo = \Fobia\DataBase\DbFactory::create('mysql://root@localhost/ezc-test');
                $dsn = 'mysql:dbname=' . $_ENV['database']['database'] . ';host=' . $_ENV['database']['host'];
                self::$pdo = new \PDO($dsn, $_ENV['database']['username'], $_ENV['database']['password']);
            }
            $this->conn = $this->createDefaultDBConnection(self::$pdo);
        }

        return $this->conn;
    }

    /**
     * @return PHPUnit_Extensions_Database_DataSet_IDataSet
     */
    public function getDataSet()
    {
        return $this->createMySQLXMLDataSet(dirname(__FILE__).'/../../../_files/database.xml');
    }

    protected function setUp()
    {
        if (!$this->db) {
            $this->db = new \Fobia\DataBase\Handler\MySQL($this->getConnection()->getConnection());
            parent::setUp();
        }
    }

    protected function tearDown()
    {
        $this->db->setLogger(null);
    }

    protected function initializeDbLogget()
    {
        $this->db->setLogger(function($t, $msg, $args) {
            echo "{$t}\n"
                . "QUERY: {$msg}\n";

            if ($args['params']) {
                echo "Params: " . (is_array($args['params']) ? json_encode($args['params']) : $args['params'])
                    . "\n";
            }
            echo "Time: {$args['time']}\n";
            if (isset($args['error'])) {
                list($sql, $code, $msg) =$args['error'];
                echo "Error $code($sql): $msg\n" ;
            } else {
                echo "Rows: {$args['rows']}\n";
            }
        });
    }
    /////////////////////////////////////////////////////////////////////////

    public function testLog1()
    {
        $this->expectOutputRegex("/Rows: 1/");
        $this->initializeDbLogget();
        $this->db->query("SELECT VERSION()");
    }

    public function testLog2()
    {
        $this->expectOutputRegex("/Rows: 1/");
        $this->initializeDbLogget();

        $q = $this->db->createSelectQuery();
        $q->select('NOW()')->prepare()->execute();
    }

    public function testLog3()
    {
        $this->expectOutputRegex("/Rows: 3/");
        $this->initializeDbLogget();
        $this->getConnection()->createDataSet();

        $this->db->exec("UPDATE authors SET lastname = 'new' WHERE id > 7");
    }

    public function testLog4()
    {
        $this->expectOutputRegex('/Params: {"val":"new_value 2","id":2}/');
        $this->initializeDbLogget();
        $this->getConnection()->createDataSet();
        
        $q = $this->db->createUpdateQuery();
        $stmt = $q->update('authors')
                ->set('lastname', ':val')
                ->where("id = :id")
                ->prepare();

        $stmt->execute(array(
            'val'=>'new_value 1',
            'id' => 1
        ));
        $stmt->execute(array(
            'val'=>'new_value 2',
            'id' => 2
        ));
        $stmt->execute(array(
            'val'=>'new_value 3',
            'id' => 3
        ));

        $r = $this->db->query("SELECT id, lastname FROM authors WHERE id = 3");
        $item = $r->fetch();
        $this->assertSame(array(
            'id' => '3',
            'lastname'=>'new_value 3',
        ), $item);
    }

    public function testLogError()
    {
        $this->expectOutputRegex("/Error 1064/");
        $this->initializeDbLogget();
        $this->db->exec("SELECT ERROR-SHOW-VER()");
    }
}