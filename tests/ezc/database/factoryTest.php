<?php

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-08-24 at 02:17:18.
 */
class ezcDbFactoryTest extends PHPUnit_Framework_TestCase
{
    public static function suite()
    {
        return new PHPUnit_Framework_TestSuite( __CLASS__ );
    }

    protected $default;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->default =  ezcDbTestCase::instanceDb();
    }

    protected function tearDown()
    {
        ezcDbInstance::reset();
        ezcDbInstance::set( $this->default );
    }

    public function testConstructorNoDatabaseName()
    {
        try
        {
            // we'll create an instance of the correct type simply by making a similar one to the default.
            $db = ezcDbInstance::get();
            $className = get_class( $db );
            $db = new $className( array() );
            $this->fail( "Instantiating a handler with no database name should not be successful" );
        }
        catch ( ezcDbMissingParameterException $e ) {}
    }

    /**
     * @covers ezcDbFactory::addImplementation
     * @todo   Implement testAddImplementation().
     */
    public function testAddImplementation()
    {
        ezcDbFactory::addImplementation( 'test', 'ezcDbHandlerTest' );
        $array = ezcDbFactory::getImplementations();
        $this->assertEquals( array( 'mysql', 'pgsql', 'oracle', 'sqlite', 'mssql', 'test' ), $array );
    }

    /**
     * @covers ezcDbFactory::addImplementation
     * @depends testAddImplementation
     */
    public function testGetImplementationsAfterAddingOne()
    {
        ezcDbFactory::addImplementation( 'test', null );
        $array = ezcDbFactory::getImplementations();
        $this->assertEquals( array( 'mysql', 'pgsql', 'oracle', 'sqlite', 'mssql' ), $array );
    }

    /**
     * @covers ezcDbFactory::getImplementations
     */
    public function testGetImplementations()
    {
        $array = ezcDbFactory::getImplementations();
        $this->assertEquals( array( 'mysql', 'pgsql', 'oracle', 'sqlite', 'mssql' ), $array );
    }

    /**
     * @covers ezcDbFactory::create
     * @todo   Implement testCreate().
     */
    public function testCreate()
    {
        $db = ezcDbFactory::create('mysql://root@localhost/ezc-test');
        $this->assertTrue( $db instanceof ezcDbInterface );
    }

    /**
     * @covers ezcDbFactory::wrapper
     * @todo   Implement testWrapper().
     */
    public function testWrapper()
    {
        $pdo = new PDO('mysql://localhost/ezc-test', 'root', '');
        $db = ezcDbFactory::wrapper($pdo);
        $this->assertTrue( $db instanceof ezcDbInterface );
    }

    public function testSqliteDSN1()
    {
        if ( !ezcBaseFeatures::hasExtensionSupport( 'pdo_sqlite') )
        {
            $this->markTestSkipped();
            return;
        }
        $db = ezcDbFactory::create( 'sqlite://:memory:' );
        $db = ezcDbFactory::create( 'sqlite:///tmp/testSqliteDSN1.sqlite' );
        $this->assertEquals( true, file_exists( '/tmp/testSqliteDSN1.sqlite' ) );
        unlink( '/tmp/testSqliteDSN1.sqlite' );
        $this->assertEquals( false, file_exists( ':memory:' ) );
    }

    public function testSqliteDSN2()
    {
        if ( !ezcBaseFeatures::hasExtensionSupport( 'pdo_sqlite') )
        {
            $this->markTestSkipped();
            return;
        }
        try
        {
            $db = ezcDbFactory::create( 'sqlite:///:memory:' );
            $this->fail( "Expected exception not thrown." );
        }
        catch ( PDOException $e )
        {
            $this->assertEquals( "SQLSTATE[HY000] [14] unable to open database file", $e->getMessage() );
        }
    }

    public function testSqliteDSN3()
    {
        if ( !ezcBaseFeatures::hasExtensionSupport( 'pdo_sqlite') )
        {
            $this->markTestSkipped();
            return;
        }
        try
        {
            $db = ezcDbFactory::create( 'sqlite://' );
            $this->fail( "Expected exception not thrown." );
        }
        catch ( ezcDbMissingParameterException $e )
        {
            $this->assertEquals( "The option 'database' is required in the parameter 'dbParams'.", $e->getMessage() );
        }
    }

    /*
    public function testSqliteDSN4()
    {
        if ( !ezcBaseFeatures::hasExtensionSupport( 'pdo_sqlite') || ezcBaseFeatures::os() !== 'Windows' )
        {
            $this->markTestSkipped( 'Windows only test' );
            return;
        }
        $db = ezcDbFactory::create( 'sqlite:///c:\tmp\foo.sqlite' );
        $this->assertEquals( true, file_exists( 'c:\tmp\foo.sqlite' ) );
        unlink( 'c:\tmp\foo.sqlite' );
    }
    */
    public function testParamsSqliteDatabase1()
    {
        if ( !ezcBaseFeatures::hasExtensionSupport( 'pdo_sqlite') )
        {
            $this->markTestSkipped();
            return;
        }
        try
        {
            $db = ezcDbFactory::create( array( 'handler' => 'sqlite' ) );
            $this->fail( "Expected exception not thrown." );
        }
        catch ( ezcDbMissingParameterException $e )
        {
            $this->assertEquals( "The option 'database' is required in the parameter 'dbParams'.", $e->getMessage() );
        }
    }

    public function testParamsSqliteDatabase2()
    {
        if ( !ezcBaseFeatures::hasExtensionSupport( 'pdo_sqlite') )
        {
            $this->markTestSkipped();
            return;
        }
        $db = ezcDbFactory::create( array( 'handler' => 'sqlite', 'port' => 'memory' ) );
        $this->assertEquals( false, file_exists( 'memory' ) );
    }

}